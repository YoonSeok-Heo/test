1. 
회사 동기들과 현재 진행하고 있는 사내 중고거래 프로젝트가 가장 의미 있는 개발 활동입니다.
프로젝트를 진행하고 있는 이유가 기존에 사용하지 않았던 기술을 사용하고자 진행한 프로젝트이기 때문에 최대한 처음 사용해 보는 기술들을 사용했습니다. 이번에 처음 접하거나 접해봤어도 정확히 알지 못하는 기술을 크게 4가지입니다. Spring Security + JWT, Redis, Jenkins, 1 대 1 채팅 구현입니다

Spring Security + JWT를 적용하면서 가장 많은 시간을 투자했습니다. 저는 '일단 해보자'라는 생각을 가지고 있습니다. 그리고 JWT를 이용한 로그인을 일단 적용시키기 시작했습니다. Spring Securiy에 대한 사전 지식이 전혀 없는 상태로 시작한 점이 많은 시간을 투자한 원인이 됐습니다. JWT에 대한 강의를 보고 개발을 진행하는데 login의 구현과 어디서 데이터를 비교하는지 왜 이런 동작을 하는지 필터에서는 어떤 역할을 하는지 공부하지 않아서 전혀 알지 못했습니다. 그리고 Spring Security부터 해보자는 마음으로 Spring Security가 동작하는 동작 순서와 해당 부분이 어떤 역할을 하는지 이해하는 학습을 진행했습니다. 동작 순서에 맞게 개발을 진행하다 보니 동작하지 않던 프로세스가 차츰차츰 돌아가기 시작하고 JWT의 적용까지 문제없이 일사천리로 진행되었습니다.
새로운 버전의 Spring Security에서는 WebSecurityConfigurerAdapter가 deprecated 되었습니다. 강의의 인터넷의 자료들은 deprecated 되기 전의 자료만 있었고, 개발자로서 deprecated된 클래스를 사용하고 싶지 않았습니다. deprecated된 후 가장 효율적인 방법들을 찾아보다. Spring 공식 홈페이지에 WebSecurityConfigurerAdapter가 deprecated가 되면서 권장하는 방식의 코드 포스트를 확인하고 적용하였습니다.
SpringSecurity를 적용하면서 느낀 점은 "새로운 도전이라도 기초적인 지식은 쌓아두고 도전하자"와 "공식 홈페이지에서 버전에 따른 변경점과 그 대응방법들을 한 번쯤 확인해 보자"라는 것을 느꼈습니다. 간단한 느낀 점이지만 앞으로 저에게 있어 개발하는데 큰 도움이 될 것입니다.

Jenkins를 적용하는 과정에서도 정말 많은 시간을 투자했습니다. github에 푸시를 하면 docker에 tomcat container에 자동으로 배포되는 방법으로 구현하였습니다. jenkins 설정을 마치고 git push를 해도 서버에는 아무 변화가 없고 배포 실패했다는 로그만 나왔습니다. jenkins의 tomcat war 배포는 tomcat manager api를 활용했고 tomcat manager의 설정 후 배포를 성공했다는 jenkins의 로그를 확인했습니다. 하지만 웹에는 접속이 가능하나 어떠한 페이지에서도 404에러만 나왔습니다. spring security가 정상적으로 적용되었다면 403에러가 발생해야 정상적이었는데 배포가 정상적으로 이루어지지 않았다는 것을 깨닫고 기존 jenkins 테스트를 했던 프로젝트와 비교도 하고 모든 과정을 처음부터 재진행하기도 했습니다. 마지막 시도로 tomcat의 버전을 다운그레이드하고 모든 문제를 해결하였습니다. 프로젝트 시작 전에 사용할 기술들의 버전을 맞춰보고 정상적으로 호환이 되는지 테스트를 해야 한다는 생각을 가지게 되었습니다.

2. 

교내 프로젝트로는 펫시터 매칭 시스템 '돌봐주개'를 제작하였습니다. 반려동물을 키우는 사람들과 펫시터들의 매칭을 도와주는 웹사이트입니다. 프로젝트를 어떻게 서비스할까 고민하다가 AWS의 기능들을 다양하게 사용해 보기로 하였습니다. 서비스 EC2, 데이터베이스 RDS, 스토리지 S3를 사용하면서 프로젝트의 주요 기능들을 AWS 기반으로 서비스하고 있습니다. 그리고 Docker를 이용해서 프로젝트를 이미지로 만들어 언제 어디서든 같은 환경에 프로젝트를 실행할 수 있도록 하였습니다. 프로젝트 '돌봐주개' 에서는 근래 주목받는 클라우드의 사용법과 docker라는 오픈소스를 사용법을 익히는데 좋은 경험이 됐습니다. 배운다는 것을 두려워하지 않고 새로운 기술에 무한한 흥미를 느껴 항상 공부하고 배우겠습니다.

제가 현재 담당 중인 업무는 크롤링 한 데이터를 지식 그래프화하고 지식 그래프를 이용한 데이터 시각화 서비스를 운영 중입니다. 현재 프로젝트는 기존에 글로만 봐오던 MSA 구조와 SPA를 적용한 모습을 처음 확인하였습니다. MSA 구조는 각각의 프로세스들을 이런 식으로 사용할 수 있구나 라는 점을 저에게 인식시켜주었고 SPA를 사용할 땐 REST API의 효율성과 장점을 크게 돋보이게 해주는 기술이라고 생각합니다.
현재 MSA와 SPA를 활용한 토이 프로젝트 또한 진행 중이며 해당 프로젝트를 마무리하기 전까지 MSA와 SPA의 깊은 곳까지 터득하려고 합니다.


3.

21년도 3월부터 8월까지 진행한 채용 연계형 교육에서 팀원들과 만들게 된 챗봇, 음성인식/합성 프로젝트를 진행하며 많은 기술적 어려움에 직면하였습니다. 음성학, 딥러닝 부분을 한 번도 겪어보지 않은 인원들로만 구성되어 있었기 때문입니다. 팀원 3명이 음성 인식, 음성 합성, 백엔드(Flask) 한 분야씩 맡아 학습을 진행하였습니다. 팀에서는 약 2달간의 시간 동안 음성학부터 학습하는 것은 주어진 시간상 힘들 것 같다고 판단하여 음성학은 가장 기초적인 부분만 학습하고 딥러닝에 관한 학습을 진행하였습니다. 딥러닝 프레임워크는 pytorch를 사용하였습니다. pytorch부터 근래 음성인식에서 많이 사용하고 있는 End-to-End 모델까지 처음부터 학습하는데 많은 시간이 소요되었습니다. 제가 맡은 부분은 음성인식 부분이었습니다. 데이터 학습 중 생긴 OOM이 저에게 가장 큰 문제로 다가왔습니다. 제게 부족한 컴퓨팅 자원이 OOM을 발생한 것이기 때문에 물리적인 투자 없이는 더 좋은 결과를 가져오기가 힘들었습니다. 첫 번째로 저는 물리적 한계와 타협하고 수많은 논문 중 모델의 크기가 작은 모델을 골랐습니다. 비록 End-to-End 모델의 초기 모델 DeepSpeech2 모델을 사용하게 되었지만 모델 학습이 어느 정도 되는 모습을 보니 학습 가능성을 보게 되었습니다. 두 번째로는 학습용 데이터 중 데이터의 크기가 큰 오디오는 학습에서 사용하지 않았습니다. 처음엔 OOM으로 인하여 1epoch도 학습하기 힘들었으나 결국 25% cer의 모델을 만들었습니다. 더 좋은 모델을 만들기 위해 다양한 방법으로 모델 학습을 진행하던 도중 학습용 데이터가 많은 것이 모델 성능이 더 좋다는 것을 깨닫고 학습모델에 변화를 한 번 더 주었습니다. 기존 모델에서 32 batch에서 16배치로 줄이고 모델 레이어의 1/5 정도로 제거해서 모델의 크기를 대폭 줄였습니다. 그리고 길이의 제한을 둔 학습용 오디오의 제한을 대폭 풀어서 모델학습을 진행한 결과 약 20% cer로 모델 학습이 마무리되었습니다. 기본적으로 사용하는 방법이지만 괞찮은 결과를 가져와 아주 만족한 결과를 가져왔습니다. 마지막으로 팀원들이 다들 학습에 대한 욕심이 강해서 서로 공부하고 배운 토대로 만든 작업물을 서로 설명해 주며 지식을 공유하는 과정을 거쳤습니다.



상세 업무 내용

대규모 한국어 말뭉치 구축
인공지능에 사용할 대규모 한국어 말뭉치 구축 사업으로 커뮤니티의 글 유튜브의 댓글 등 다양한 내용을 수집해 전처리 후 구축도구를 이용해 데이터를 가공하는 사업입니다.
해당업무에서 구축도구 수정의 업무를 맡았습니다. 인풋 데이터와 아웃풋 데이터의 수정과 사용자들의 요구사항을 반영하는 업무입니다.
데이터 가공 후 아웃풋으로 나온 데이터에서 다시한번 사용할 수 없는 개인정보 데이터를 비식별화 하는 과정을 진행했습니다.

은행 지식그래프
수집한 데이터를 지식그래프화하는 솔루션 유지/보수/추가개발 담당중입니다.
기존 은행의 데이터들은 DB화가 전혀 이루어있지 않고 PDF 글로만 이루어져있습니다. 그러한 데이터들을 크롤링해서 DB화 하고 지식그래프를 이용해 데이터를 제공하는 솔루션입니다.
